// import React, {useState, useEffect} from 'react';
// import {
//   SafeAreaView,
//   ScrollView,
//   StatusBar,
//   StyleSheet,
//   Text,
//   useColorScheme,
//   View,
//   TouchableOpacity,
//   FlatList,
//   Button,
//   PermissionsAndroid,
// } from 'react-native';


import React, {Component} from 'react';
import {ActivityIndicator,
    Platform,
    StyleSheet,
    Text,
    View,
    Button,
    ScrollView,
    DeviceEventEmitter,
    NativeEventEmitter,
    Switch,
    TouchableOpacity,
    Dimensions,
    ToastAndroid} from 'react-native';

import {
  USBPrinter,
  NetPrinter,
  BLEPrinter,
} from 'react-native-thermal-receipt-printer';

import {BleManager} from 'react-native-ble-plx';
import base64 from 'react-native-base64';

import {BluetoothManager,BluetoothEscposPrinter,BluetoothTscPrinter} from 'react-native-bluetooth-escpos-printer';


var {height, width} = Dimensions.get('window');
export default class Home extends Component {


    _listeners = [];

    constructor() {
        super();
        this.state = {
            devices: null,
            pairedDs:[],
            foundDs: [],
            bleOpend: false,
            loading: true,
            boundAddress: '',
            debugMsg: ''
        }
    }

    componentDidMount() {//alert(BluetoothManager)
        BluetoothManager.isBluetoothEnabled().then((enabled)=> {
            this.setState({
                bleOpend: Boolean(enabled),
                loading: false
            })
        }, (err)=> {
            err
        });

        if (Platform.OS === 'ios') {
            let bluetoothManagerEmitter = new NativeEventEmitter(BluetoothManager);
            this._listeners.push(bluetoothManagerEmitter.addListener(BluetoothManager.EVENT_DEVICE_ALREADY_PAIRED,
                (rsp)=> {
                    this._deviceAlreadPaired(rsp)
                }));
            this._listeners.push(bluetoothManagerEmitter.addListener(BluetoothManager.EVENT_DEVICE_FOUND, (rsp)=> {
                this._deviceFoundEvent(rsp)
            }));
            this._listeners.push(bluetoothManagerEmitter.addListener(BluetoothManager.EVENT_CONNECTION_LOST, ()=> {
                this.setState({
                    name: '',
                    boundAddress: ''
                });
            }));
        } else if (Platform.OS === 'android') {
            this._listeners.push(DeviceEventEmitter.addListener(
                BluetoothManager.EVENT_DEVICE_ALREADY_PAIRED, (rsp)=> {
                    this._deviceAlreadPaired(rsp)
                }));
            this._listeners.push(DeviceEventEmitter.addListener(
                BluetoothManager.EVENT_DEVICE_FOUND, (rsp)=> {
                    this._deviceFoundEvent(rsp)
                }));
            this._listeners.push(DeviceEventEmitter.addListener(
                BluetoothManager.EVENT_CONNECTION_LOST, ()=> {
                    this.setState({
                        name: '',
                        boundAddress: ''
                    });
                }
            ));
            this._listeners.push(DeviceEventEmitter.addListener(
                BluetoothManager.EVENT_BLUETOOTH_NOT_SUPPORT, ()=> {
                    ToastAndroid.show("Device Not Support Bluetooth !", ToastAndroid.LONG);
                }
            ))
        }
    }

    componentWillUnmount() {
        //for (let ls in this._listeners) {
        //    this._listeners[ls].remove();
        //}
    }

    _deviceAlreadPaired(rsp) {
        var ds = null;
        if (typeof(rsp.devices) == 'object') {
            ds = rsp.devices;
        } else {
            try {
                ds = JSON.parse(rsp.devices);
            } catch (e) {
            }
        }
        if(ds && ds.length) {
            let pared = this.state.pairedDs;
            pared = pared.concat(ds||[]);
            this.setState({
                pairedDs:pared
            });
        }
    }

    _deviceFoundEvent(rsp) {//alert(JSON.stringify(rsp))
        var r = null;
        try {
            if (typeof(rsp.device) == "object") {
                r = rsp.device;
            } else {
                r = JSON.parse(rsp.device);
            }
        } catch (e) {//alert(e.message);
            //ignore
        }
        //alert('f')
        if (r) {
            let found = this.state.foundDs || [];
            if(found.findIndex) {
                let duplicated = found.findIndex(function (x) {
                    return x.address == r.address
                });
                //CHECK DEPLICATED HERE...
                if (duplicated == -1) {
                    found.push(r);
                    this.setState({
                        foundDs: found
                    });
                }
            }
        }
    }

    _renderRow(rows){
        let items = [];
        for(let i in rows){
            let row = rows[i];
            if(row.address) {
                items.push(
                    <TouchableOpacity key={new Date().getTime()+i} style={styles.wtf} onPress={()=>{
                    this.setState({
                        loading:true
                    });
                    BluetoothManager.connect(row.address)
                        .then((s)=>{
                            this.setState({
                                loading:false,
                                boundAddress:row.address,
                                name:row.name || "UNKNOWN"
                            })
                        },(e)=>{
                            this.setState({
                                loading:false
                            })
                            alert(e);
                        })

                }}><Text style={styles.name}>{row.name || "UNKNOWN"}</Text><Text
                        style={styles.address}>{row.address}</Text></TouchableOpacity>
                );
            }
        }
        return items;
    }

    render() {
        return (
            <ScrollView style={styles.container}>
            {/* <Text>  {JSON.stringify(this.state,null,3)}</Text> */}
                <Text>{this.state.debugMsg}</Text>
                <Text style={styles.title}>{this.state.bleOpend?"Blutooth is On":"Open BLE Before Scanning"} </Text>
                <View>
                <Switch value={this.state.bleOpend} onValueChange={(v)=>{
                this.setState({
                    loading:true
                })
                if(!v){
                    BluetoothManager.disableBluetooth().then(()=>{
                        this.setState({
                            bleOpend:false,
                            loading:false,
                            foundDs:[],
                            pairedDs:[]
                        });
                    },(err)=>{alert(err)});

                }else{
                    BluetoothManager.enableBluetooth().then((r)=>{
                        var paired = [];
                        if(r && r.length>0){
                            for(var i=0;i<r.length;i++){
                                try{
                                    paired.push(JSON.parse(r[i]));
                                    // console.log(paired)
                                }catch(e){
                                    //ignore
                                }
                            }
                        }
                        this.setState({
                            bleOpend:true,
                            loading:false,
                            pairedDs:paired
                        })
                    },(err)=>{
                        this.setState({
                            loading:false
                        })
                        alert(err)
                    });
                }
            }}/>
                    <Button disabled={this.state.loading || !this.state.bleOpend} onPress={()=>{
                        this.scan();
                    }} title="Scan"/>
                </View>
                <Text  style={styles.title}>Connected:<Text style={{color:"blue"}}>{!this.state.name ? 'No Devices' : this.state.name}</Text></Text>
                <Text  style={styles.title}>Found(tap to connect):</Text>
                {this.state.loading ? (<ActivityIndicator animating={true}/>) : null}
                <View style={{flex:1,flexDirection:"column"}}>
                {
                    this._renderRow(this.state.foundDs)
                }
                </View>
                <Text  style={styles.title}>Paired:</Text>
                {this.state.loading ? (<ActivityIndicator animating={true}/>) : null}
                <View style={{flex:1,flexDirection:"column"}}>
                {
                    this._renderRow(this.state.pairedDs)
                }
                </View>

              
<View style={styles.btn}>
                <Button 
                // disabled={this.state.loading || !this.state.name}
                 onPress={async () => {
                    await BluetoothEscposPrinter.printBarCode("123456789012", BluetoothEscposPrinter.BARCODETYPE.JAN13, 3, 120, 0, 2);
                    await  BluetoothEscposPrinter.printText("\r\n\r\n\r\n", {});
                }} title="Print BarCode"/>
            </View>

            </ScrollView>
        );
    }

 

    scan() {
        this.setState({
            loading: true
        })
        BluetoothManager.scanDevices()
            .then((s)=> {
              // console.log('scaneed',s)
                var ss = s;
                var found = ss.found;
                // try {
                //     found = JSON.parse(found);//@FIX_it: the parse action too weired..
                //     console.log('json',found)
                // } catch (e) {
                //   console.log(e.message)
                //     //ignore
                // }
                var fds =  this.state.foundDs;
                if(found && found.length){
                    fds = found;
                }
                console.log(fds)
                this.setState({
                    foundDs:fds,
                    loading: false
                });
            }, (er)=> {
                this.setState({
                    loading: false
                })
                alert('error' + JSON.stringify(er));
            });
    }


}

const styles = StyleSheet.create({
    container: {
        flex: 1,
        // backgroundColor: 'black',
    },

    title:{
        width:width,
        backgroundColor:"#eee",
        color:"#232323",
        paddingLeft:8,
        paddingVertical:4,
        textAlign:"left"
    },
    wtf:{
        flex:1,
        flexDirection:"row",
        justifyContent:"space-between",
        alignItems:"center"
    },
    name:{
        flex:1,
        textAlign:"left"
    },
    address:{
        flex:1,
        textAlign:"right"
    }
});
//-----------------------------------------------ble-plx------------------------------------------------------
// export const manager = new BleManager();

// const requestPermission = async () => {
//   const granted = await PermissionsAndroid.request(
//     PermissionsAndroid.PERMISSIONS.ACCESS_FINE_LOCATION,
//     {
//       title: 'Request for Location Permission',
//       message: 'Bluetooth Scanner requires access to Fine Location Permission',
//       buttonNeutral: 'Ask Me Later',
//       buttonNegative: 'Cancel',
//       buttonPositive: 'OK',
//     },
//   );
//   return granted === PermissionsAndroid.RESULTS.GRANTED;
// };

// const App = () => {
//   const [logData, setLogData] = useState([]);
//   const [logCount, setLogCount] = useState(0);
//   const [scannedDevices, setScannedDevices] = useState({});
//   const [deviceCount, setDeviceCount] = useState(0);

//   useEffect(() => {
//     manager.onStateChange(state => {
//       const subscription = manager.onStateChange(async state => {
//         console.log(state);
//         const newLogData = logData;
//         newLogData.push(state);
//         await setLogCount(newLogData.length);
//         await setLogData(newLogData);
//         subscription.remove();
//       }, true);
//       return () => subscription.remove();
//     });
//   }, [manager]);

//   const scanDevices = async () => {
//     const btState = await manager.state();
//     // test if bluetooth is powered on
//     if (btState !== 'PoweredOn') {
//       alert('Bluetooth is not powered on');
//       return false;
//     }
//     // explicitly ask for user's permission
//     const permission = await requestPermission();
//     if (permission) {
//       manager.startDeviceScan(null, null, async (error, device) => {
//         // error handling
//         if (error) {
//           console.log(error);
//           return;
//         }
//         // found a bluetooth device
//         if (device) {
//           //   console.log(`${device.name} (${device.id})}`);
//           const newScannedDevices = scannedDevices;
//           newScannedDevices[device.id] = device;
//           await setDeviceCount(Object.keys(newScannedDevices).length);
//           await setScannedDevices(scannedDevices);
//         }
//       });
//     }
//     return true;
//     // return manager.stopDeviceScan();
//   };

//   const handleConnect = async (device, writeValue) => {
//     try {
//       const characteristicRX = 'af49414a-f002-11eb-9a03-0242ac130003';
//       console.log('id---------------------------------', device.id);
//       await manager.connectToDevice(device.id, {autoConnect: true});
//       console.log(await manager.isDeviceConnected(device.id));
//       // const deviceConnected = await device.isConnected();
//       // console.log("=>askdjfkjaskldfjk", deviceConnected);c
//       // await device.discoverAllServicesAndCharacteristics();
//       await manager.stopDeviceScan();
//       await manager.discoverAllServicesAndCharacteristicsForDevice(device.id);
//       const services = await manager.servicesForDevice(device.id);
//       // console.log(services)
//       const characteristics = [];
//       services.forEach(async service => {
//         const deviceCharacteristics = await device?.characteristicsForService(
//           service.uuid,
//         );
//         characteristics.push(deviceCharacteristics);

//         deviceCharacteristics.forEach((char)=>{
//             console.log(char.uuid,char.serviceUUID)
//         //      await manager.writeCharacteristicWithResponseForDevice(
//         // device.id,
//         // serviceUUID,
//         // char.uuid,
//         // base64.encode(writeValue),
//     //   );
//         });
//         // console.log('deviceCharacteristics',deviceCharacteristics) ///imp
//         // characteristics[service.uuid] = deviceCharacteristics || [];
//         // deviceCharacteristics.uuid,deviceCharacteristics.serviceUUID
//       });
//       console.log(characteristics, 'characteristics');

//       await manager.writeCharacteristicWithResponseForDevice(
//         device.id,
//         '89d3502b-0f36-433a-8ef4-c502ad55f8dc',
//         'c6b2f38c-23ab-46d8-a6ab-a3a870bbd5d7',
//         base64.encode(writeValue),
//       );
//     } catch (err) {
//       console.log('deviceNotification catch error:', err);
//     }
//   };

//   //   const deviceNotifications = async (device, writeValue) => {

//   //     const service = "af493e2a-f002-11eb-9a03-0242ac130003";
//   //     const characteristicTX = "af49423a-f002-11eb-9a03-0242ac130003";
//   //     const characteristicRX = "af49414a-f002-11eb-9a03-0242ac130003";

//   //     if (device) {
//   //         try {
//   //             // device.monitorCharacteristicForService(service, characteristicTX, (error, characteristic) => {
//   //             //     if (error) {
//   //             //         console.log(error);
//   //             //     } else {
//   //             //         setCharacteristicValue(() => {
//   //             //         return [{id: uuid.v4(), value: (base64.decode(characteristic.value))}];
//   //             //     })}
//   //             // });
//   //             console.log(device.id)
//   //             await manager.writeCharacteristicWithResponseForDevice('70:70:0D:B4:64:D7',service, characteristicRX, base64.encode(writeValue));
//   //         console.log("Writing to RX:", writeValue);
//   //         }
//   //         catch (err) {
//   //             console.log("deviceNotification catch error:", err);
//   //         }
//   //     };
//   // }

//   return (
//     <View style={{flex: 1, padding: 10}}>
//       <View style={{flex: 1, padding: 10}}>
//         <Text style={{fontWeight: 'bold'}}>Bluetooth Log ({logCount})</Text>
//         <FlatList
//           data={logData}
//           renderItem={({item}) => {
//             return <Text>{item}</Text>;
//           }}
//         />
//         <Button
//           title="Turn On Bluetooth"
//           onPress={async () => {
//             const btState = await manager.state();
//             // test is bluetooth is supported
//             if (btState === 'Unsupported') {
//               alert('Bluetooth is not supported');
//               return false;
//             }
//             // enable if it is not powered on
//             if (btState !== 'PoweredOn') {
//               await manager.enable();
//             } else {
//               await manager.disable();
//             }
//             return true;
//           }}
//         />
//       </View>

//       <View style={{flex: 2, padding: 10}}>
//         <Text style={{fontWeight: 'bold'}}>
//           Scanned Devices ({deviceCount})
//         </Text>
//         <FlatList
//           data={Object.values(scannedDevices)}
//           renderItem={({item}) => {
//             return (
//               <TouchableOpacity
//                 onPress={() => {
//                   handleConnect(item, 'helloworld');
//                 }}>
//                 <Text>{`${item.name} (${item.id})`}</Text>
//               </TouchableOpacity>
//             );
//           }}
//         />
//         <Button title="Scan Devices" onPress={() => scanDevices()} />
//         {/* <Button title="send message" onPress={() => deviceNotifications(Object.values(scannedDevices),'helloworld')} /> */}
//       </View>
//     </View>
//   );
// };

// const styles = StyleSheet.create({});

// export default App;
